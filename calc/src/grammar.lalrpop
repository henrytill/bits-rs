// -*- mode: prog; tab-width: 4; -*-
use std::str::FromStr;

use crate::syntax::Expr;

grammar;

// -- Precedence hierarchy (lowest to highest) --
// 1. Addition, Subtraction
// 2. Multiplication
// 3. Exponentiation (right associative)
// 4. Unary minus, atoms

// Addition and subtraction (lowest precedence)
pub Expr: Box<Expr> = {
    <lhs:Expr> "+" <rhs:MulExpr> => Box::new(Expr::Add(lhs, rhs)),
    <lhs:Expr> "-" <rhs:MulExpr> => Box::new(Expr::Sub(lhs, rhs)),
    MulExpr,
};

// Multiplication
MulExpr: Box<Expr> = {
    <lhs:MulExpr> "*" <rhs:ExpExpr> => Box::new(Expr::Mul(lhs, rhs)),
    ExpExpr,
};

// Exponentiation (right associative)
ExpExpr: Box<Expr> = {
    <base:AtomExpr> "^" <exp:ExpExpr> => Box::new(Expr::Exp(base, exp)),
    AtomExpr,
};

// Atomic expressions and unary operations (highest precedence)
AtomExpr: Box<Expr> = {
    <n:r"[0-9]+"> => Box::new(Expr::Const(i32::from_str(n).unwrap())),
    <id:r"[a-zA-Z][a-zA-Z0-9]*"> => Box::new(Expr::Var(id.to_string())),
    <mv:r"\$[a-zA-Z][a-zA-Z0-9]*"> => Box::new(Expr::Metavar(mv[1..].to_string())),
    "-" <expr:AtomExpr> => Box::new(Expr::Neg(expr)),
    "(" <expr:Expr> ")" => expr,
};
